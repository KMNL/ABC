#include <bits/stdc++.h>
using namespace std;

int main(){
  int N, K;                 
  long long sum = 0;
  cin >> N >> K;
  
  // type-kind array
  vector<pair<int,int>> td(N);
  // array that store the sushi number
  set<int>	key;
  // array that store the sushi kind
  set<int> kind;

  // get every state of sushi
  for(int i = 0; i< N; i++) {
  // cuz I need to sort with its delicousness,entering kinds first.
      cin >> td[i].second >> td[i].first;
      // calculate the summary of these kind 
      kind.insert(td[i].second);
  }

  // sort it with its delicousness
  sort(td.rbegin(),td.rend());
  int n = kind.size(),m = K;
  // I'll reuse this array,so clear it
  kind.clear();

// first, full sum with different kinds of sushi that owns the most deliciousness
  for(int i = 0; i < N;i++){
  	// if that kinds of sushi haven't been searched,sum plus that.
      if(!kind.count(td[i].second)){
        sum += td[i].first;
	// and mark its kind
        kind.insert(td[i].second);
	// also remember its location
        key.insert(i);
        m--;
      }
      if(m == 0)    break;
  }

	 // if(total of kind < K),full sum from the most delicious ones從最有價值的開始填充
  if (m > 0){
  //search every numbers
      for(int i = 0; i < N; i++){
      // loop it until sum is fulled with K個 sushi
          if( m == 0)   break;
	  // if that sushi haven't inserted to the sum,
          if (!key.count(i)){
	  // sum plus its delicousness
              sum+= td[i].first;
	      // remember its location
              key.insert(i);
              m--;
          }
      }
  }
  // sum += its kind^2
	sum+= n*n;
  
  // search all sushi 
  for( int i = 0; i < N; i++){
  // search sushi in the sum array
      for(int j = 0; j < N; j++){
      // get a copy of sum
            long long res = sum;
	    // if( i != j ) && same kinds of sushi already in the sum array and changing with it
	    
        if(!key.count(i) && key.count(j)){
	// just to compare past one's summary with changed one's summary
          if(!kind.count(td[i].second) && kind.count(td[j].second)){
              res += td[i].first - td[j].first;
	      // if( i != j ) && same kinds of sushi already in the sum array but changing it with another
        	}else if(kind.count(td[i].second) && kind.count(td[j].second)){
		// res first minus n^2 then plus (n-1)^2,and swaping td[i] and td[j]
            res += -(2*n-1)-td[j].first+td[i].first;
          }
        }
	// if it becomes bigger after changed contents
        if(res > sum){
	// swap their position(1 drop out and 1 enter) and resize the n;
          key.erase(j);
          key.insert(i);
	  // recalclating the total of different kind of sushi in the sum 
          n = kind.size();
        }
	// get the maximum
        sum = max(res, sum);
      }
  }
  cout << sum << endl;
}
